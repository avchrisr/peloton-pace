version: '3.7'

services:

  peloton-pace-ui:
    container_name: peloton-pace-ui
    # image: peloton-pace-ui:dev
    build:
      context: services/peloton-pace-ui
      dockerfile: Dockerfile-peloton-pace-ui
    volumes:
      - './services/peloton-pace-ui:/app'
      - '/app/node_modules'
    # ports:        # not exposing UI port directly, as NGINX will re-direct you to it
      # - '3002:3000'
    networks:
      - peloton-pace-frontend
    # links:
    #   - peloton-pace-service
    environment:
      - REACT_APP_MY_CUSTOM_ENV_VAR1=my-custom-env-var1
      - REACT_APP_NGINX_HOSTNAME=${NGINX_HOSTNAME}
      - REACT_APP_NGINX_PORT=${NGINX_PORT}
      - REACT_APP_API_VERSION=${SERVICE_API_VERSION}

  peloton-pace-service:
    # -- if you want to scale, each instance must have a unique container name so cannot specify a container name
    # -- if container name is not specified, the container name pattern will be [project_name]_[service_name]_[count#]
    # container_name: peloton-pace-service
    # image: peloton-pace-service:dev
    build:
      context: services/peloton-pace-service
      dockerfile: Dockerfile-peloton-pace-service
      args:
        - JAR_FILE=target/peloton-pace-service-0.0.1-SNAPSHOT.jar
    ports:              # for DEV purpose only. ensure that only one instance of this service is running, because multiple instances cannot be mapped to a single local port
      - 19090:9090
    # expose:   # even if it's not exposed, it's still reachable via 9090. is it because of the network?
      # - 9090
    networks:
      - peloton-pace-frontend
      - peloton-pace-backend
    environment:
      - SERVER_PORT=${SERVICE_SERVER_PORT}
      - API_VERSION=${SERVICE_API_VERSION}
      - POSTGRES_DB_JDBC_URL=${POSTGRES_DB_JDBC_URL}
      - POSTGRES_DB_USERNAME=${POSTGRES_DB_USERNAME}
      - POSTGRES_DB_PASSWORD=${POSTGRES_DB_PASSWORD}
    depends_on:
      - postgres

  postgres:
    container_name: peloton-pace-postgres
    image: postgres:11   # postgres:11-alpine
    # restart: always      # restart whenever changes are made in docker-compose.yml. 'no' is default
    ports:
      - 15432:5432       # for DEV purpose only
    # expose:              # Q) might not be needed like the -service container?
    #  - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_DB_USERNAME}     # if not provided, 'postgres' will be used
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}       # if not provided, it'll be the same as postgres username
    # volumes:  # temporary. might really need to create a 3rd repo for docker-compose.yml and postgres, nginx configs, etc. ex) peloton-pace-docker-compose
    #   - '~/my-projects/microservices-projects/peloton-pace/pgdata:/var/lib/postgresql/data'
    networks:
      - peloton-pace-backend

  nginx:
    container_name: peloton-pace-nginx
    image: nginx:alpine
    ports:                # FE requests should go to NGINX. e.g) localhost:3001, which will then be re-routed. this is REVERSE-PROXY
      - ${NGINX_PORT}:80
    volumes:
      - './public:/srv/www/static'
      - './devops/config/nginx/nginx.conf:/etc/nginx/nginx.conf'             # where http configs are done, including load balancing
      - './devops/config/nginx/default.conf:/etc/nginx/conf.d/default.conf'  # where reverse proxy configs are done
    networks:
      - peloton-pace-frontend
    depends_on:
      - peloton-pace-ui
      - peloton-pace-service

networks:
  peloton-pace-frontend:
    driver: bridge
  peloton-pace-backend:
    driver: bridge

# -- using the pre-created external network --
# networks:
#   template_util_network:
#     external:
#       name: template_util_network
